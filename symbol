#!/usr/bin/env bash

# ============================================================================
#
#   This file was generated with 'symbol-new smlnj-viscomp-example'
#   Do NOT delete this file!
#   This file should be checked into version control.
#
#   For usage information, run
#
#       ./symbol help
#
#   or visit https://github.com/jez/symbol
#
# ============================================================================

set -euo pipefail

# cd into folder where the 'symbol' script is located, or quit (defensive)
BINPATH="$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")"
cd "$(dirname "$BINPATH")" || exit 1

target=smlnj-viscomp-example
version=v0.10.5

# ----- logging & colors ------------------------------------------------------

red=$'\x1b[0;31m'
green=$'\x1b[0;32m'
yellow=$'\x1b[0;33m'
cyan=$'\x1b[0;36m'
cnone=$'\x1b[0m'

if [ -t 1 ]; then
  USE_COLOR=1
else
  USE_COLOR=0
fi

# Detects whether we can add colors or not
# http://stackoverflow.com/a/911213
in_color() {
  local color="$1"
  shift

  if [ "$USE_COLOR" = "1" ]; then
    echo "$color$*$cnone"
  else
    echo "$*"
  fi
}

info() {
  echo "$(in_color "$cyan" "[ .. ]") $*"
}

warn() {
  # Entire warning message is yellow, because it won't halt the program, but we
  # still really want to catch the user's attention.
  in_color "$yellow" "[WARN] $*"
}

error() {
  echo "$(in_color "$red" "[ERR!]") $*"
}

success() {
  echo "$(in_color "$green" "[ OK ]") $*"
}

# ----- helper functions ------------------------------------------------------

tidy_symbol_work() {
  mkdir -p .symbol-work

  # This guards against the case where make won't build the target because
  # the last command just built the target, but for the wrong "with=" value.
  if [ -f .symbol-work/with ] && ! grep -q "^$WITH\$" .symbol-work/with; then
    rm -f ".symbol-work/bin/$target"
  fi

  rm -f .symbol-work/error.log
  rm -f .symbol-work/debug.log
}

ensure_no_argv() {
  if [ "${#ARGV[@]}" -ne 0 ]; then
    error "This command does not accept positional arguments."
    info "subcommand: $SUBCOMMAND"
    info  "argv: ${ARGV[*]}"
    exit 1
  fi
}

ensure_with() {
  if [ -z "$WITH" ]; then
    error "Could not infer what to build the project with (with='')."
    error "Is there a $target.cm file or $target.mlb file in this folder?"
    print_help
    exit 1
  elif [ "$WITH" != smlnj ] && [ "$WITH" != mlton ]; then
    error "Cannot build using 'with=$WITH'. Valid values: smlnj, mlton"
    print_help
    exit 1
  fi
}

print_help() {
  cat <<EOF

symbol: A build tool for Standard ML

Usage:
  ./symbol make [make variables]
  ./symbol install [make variables]
  ./symbol clean
  ./symbol version

Make variables:
  with=(smlnj|mlton)   Which toolchain to use to build the project.
                       [default: smlnj, unless no *.cm file]
  prefix=<prefix>      Where to install the resulting binaries to.
                       [default: \$HOME/.local]

EOF
}

# ----- option parsing --------------------------------------------------------

SUBCOMMAND="${1:-help}"
shift || true

WITH=""
MAKE_VARS=()
ARGV=()

while [[ $# -gt 0 ]]; do
  case $1 in
    with=*)
      # removes 'with=' prefix
      WITH=${1#with=}
      shift
      ;;
    *=*)
      MAKE_VARS+=("$1")
      shift
      ;;
    -h|--help)
      print_help
      exit
      ;;
    -*)
      echo
      error "Unrecognized option: '$1'"
      print_help
      exit 1
      ;;
    *)
      ARGV+=("$1")
      shift
      ;;
  esac
done

# Attempt to default with= to smlnj or mlton depending on what files exist
if [ -z "$WITH" ]; then
  if [ "$SUBCOMMAND" = 'install' ] && [ -f "$target.mlb" ]; then
    WITH=mlton
  elif [ -f "$target.cm" ]; then
    WITH=smlnj
  elif [ -f "$target.mlb" ]; then
    WITH=mlton
  fi
fi

# ----- main ------------------------------------------------------------------

main() {
  case "$SUBCOMMAND" in
    make|install)
      tidy_symbol_work
      ensure_no_argv
      ensure_with

      # We do some crazy fd dupping here so that the make subprocess can log
      # directly to our stdout, even though we redirect all of its other output
      #
      # child (make)  "maps to"  parent (symbol)
      #   fd 3           ->        <stdout>
      #   <stdout>       ->        symbol.log
      #   <stderr>       ->        symbol.log

      # Check to see if "make: Nothing to be done for `make'" would be printed
      # https://stackoverflow.com/questions/7577052
      if make -f .symbol.mk --question "$SUBCOMMAND" "with=$WITH" \
          ${MAKE_VARS[@]+"${MAKE_VARS[@]}"} 3>&1 >> .symbol-work/debug.log 2>&1; then
        return
      fi

      # Build succeeded. The make target should have printed output.
      if make -f .symbol.mk "$SUBCOMMAND" "with=$WITH" \
          ${MAKE_VARS[@]+"${MAKE_VARS[@]}"} 3>&1 >> .symbol-work/debug.log 2>&1; then
        return
      fi

      if [ -f .symbol-work/error.log ]; then
        # Normal failure.
        # error.log is populated from SML/NJ / MLton-related commands.
        cat .symbol-work/error.log
        error "Building with '$WITH' failed. See output above."
        info  "(Debug output is in .symbol-work/debug.log)"
        exit 1
      elif [ -f .symbol-work/debug.log ]; then
        # Exceptional failure. Probably something is wrong in the Makefile.
        cat .symbol-work/debug.log
        error "Build failed for unknown reason. Debugging output is above."
        exit 1
      else
        # Super exceptional failure. We don't even have makefile debug output.
        error "Build failed for unknown reason. If you can reproduce the failure,"
        error "please report an issue:  https://github.com/jez/symbol/issues"
        exit 1
      fi
      ;;

    clean)
      make -f .symbol.mk clean
      ;;

    log)
      # Helper subcommand to let logging commands be called from the makefile
      case ${ARGV[0]} in
        info|warn|error|success)
          "${ARGV[@]}"
          ;;
        *)
          error "Unrecognized log command: '${ARGV[0]}'"
          exit 1
          ;;
      esac
      ;;

    -h|--help|help)
      print_help
      ;;

    --version|version)
      echo "$version"
      ;;

    *)
      error "Unrecognized subcommand: '$SUBCOMMAND'"
      print_help
      exit 1
      ;;
  esac
}

main "$@"
